---
layout: post
title:  每周技术文章 No.53
date: 2015-12-27 22:00:00
title2: 2015.12.21-27
author: fadeer
categories: 工作
tags: Weekly Skill
---

前端技术，界面、交互、安全
----
* [websocket探索其与语音、图片的能力](http://www.alloyteam.com/2015/12/websockets-ability-to-explore-it-with-voice-pictures/)，“这篇文章里首先展望了websocket的未来，然后按照规范我们自己尝试解析和生成数据帧，对websocket有了更深一步的了解；最后通过两个demo看到了websocket的潜力”。
* [Let's Encrypt，免费好用的 HTTPS 证书](https://imququ.com/post/letsencrypt-certificate.html)，90天短期证书，加定期更新脚本就可以用下去了。另见这个[Node下自动证书自动更新模块](https://github.com/Daplie/node-letsencrypt)。
* [WebGL技术储备指南](http://taobaofed.org/blog/2015/12/21/webgl-handbook/)。
* [Web Animation API 从入门到上座](http://www.alloyteam.com/2015/12/web-animation-api-from-entry-to-the-top/)。
* [http2讲解](http://http2-explained.haxx.se/content/zh/)。
* 又一个Flux思想的轻量化实现[transdux](https://github.com/jcouyang/transdux)，更值得看看的是[这项目的起因和过程](https://blog.oyanglul.us/javascript/react-transdux-the-clojure-approach-of-flux.html)。

后端技术，操作系统、虚拟化、存储、网络、桌面、安全
----
* [全站 HTTPS 来了](http://segmentfault.com/a/1190000004199917)。
* [Windows Kernel
Architecture Internals](http://research.microsoft.com/en-us/um/redmond/events/wincore2010/Dave_Probert_1.pdf)，不懂。
* [NodeJS服务监控报警系统的核心实现和开源共建](http://paulguo.io/blog/tech/2015/12/18/NodeJS%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E6%8A%A5%E8%AD%A6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A0%B8%E5%BF%83%E5%AE%9E%E7%8E%B0%E5%92%8C%E5%BC%80%E6%BA%90%E5%85%B1%E5%BB%BA.html)，值得借鉴的实践。
* [Performance test for unikernels](http://tech.donghao.org/2015/12/23/performance-test-for-unikernels-rumpkernel-and-osv/)，在Rumpkernel（KVM）、OSv（KVM）、普通Linux运行在物理硬件上运行redis做性能比较。OSv比RumpKernel好些，但是跟物理硬件差距还比较大，虚拟网络可能是个瓶颈。
* [Node.js 2015-12-04 漏洞浅析](http://taobaofed.org/blog/2015/12/24/nodejs-2015-12-04-leak-analysis/)。
* [百万美刀的Instagram漏洞](http://drops.wooyun.org/papers/11548)，又是个很生动的渗透过程，作为一个白帽子，作者谨慎的处理操作边界，避免对目标服务和数据造成实际的破坏。另外，[原文](http://exfiltrated.com/research-Instagram-RCE.php)还补充了跟Facebook安全人员的反馈，和整个分析过程的时间线。

硬件设备，ARM、终端、移动、智能设备、安全
----
<!--preview-end-->
* [技德Remix mini迷你电脑拆解](http://www.soomal.com/doc/10100006321.htm)，内部看着也不错。
* [串口数据抓取及串口通信模拟](http://drops.wooyun.org/tips/11105)，这工具早应该知道啊。

市场、产品、项目
----
* [2015年运营『湾区日报』学到的10条经验教训](http://wanqu.co/blog/2015-12-21-year-in-review.html)，作者这个个人项目做的真值啊。[自动化操作](https://wanqu.co/blog/2015-08-19-slack-hubot.html)的经验也值得再回顾一下。

团队建设、安全
----
* [改需求之路：设计师的一小步，程序员的一大步](http://www.uisdc.com/influence-of-requirement-change)，面对下游工程师，如果不是真正做过，其实很难谈理解，所以还是得多学习。这炒个土豆丝儿就那么难么！？
* [软件工程原则](http://36kr.com/p/5041393.html)，我更看重的是：**开发有意义的东西**；只要发现就要**纠正不好的设计、错误的决策以及糟糕的代码**；系统内的**每一个知识 / 流程都应该是单一的、清晰地、有权威性的**，当然，也得是不断更新的；**好想法如果不能沟通清楚就没有意义**；一个**产品的品质取决于最薄弱环节**，这可以体现在模块文档上，体现在开源工具上，或者体现在你午餐会时的产品介绍上；**要像用户一样思考，要跟用户一起工作**。原文在[medium](https://medium.com/@treystout/engineering-principles-c58f5f8c264b#.wavkhfn1f)。
* [为什么我认为架构师需要坚持写代码？](http://timyang.net/tao/why-architect-need-programming/) 
* [软件测试新趋势](http://insights.thoughtworkers.org/software-testing-trend/)，自动化测试是王道，云技术、容器化和开源工具使得测试成本下降，安全测试贯穿整个生命周期，优化业务价值。
* [一个前端程序猿的Sublime Text3的自我修养](http://segmentfault.com/a/1190000004204640)，目前感觉ST3还是比Atom更好用。
* [StuQ 技能图谱](http://www.stuq.org/subject/skill-map/)，稍微看看。
* [用WORD写论文时有哪些好用到哭的奇技淫巧？](http://www.uisdc.com/graduation-thesis-word-skills) 希望这类技术少用到为好，呵呵。
* [怎样做好 1:1s](https://labs.spotify.com/2015/12/16/a-101-on-11s/)，“上下级**定期1对1的 meeting 是很有必要**的，目的在于：1.增加彼此信任；2.有个完整的时间&私密的空间讨论平时难以启齿的事情；3.讨论职业规划；4.心理健康、士气；5.讨论公司产品走向”。



