---
layout: post
title:  每周技术文章 No.54
date: 2016-01-03 20:00:00
title2: 2015.12.28-2016.1.3
author: fadeer
categories: 工作
tags: Weekly Skill
---

前端技术，界面、交互、安全
----
* [2015前端生态发展回顾](https://github.com/kuitos/kuitos.github.io/issues/32)。
* [不可错过的javascript迷你库](http://yanhaijing.com/js/2015/12/29/mini-js-lib/)，有几个看着不错啊。
* [解读redux工作原理](http://zhenhua-lee.github.io/react/redux.html)。
* [React Motion 缓动函数剖析](http://zhuanlan.zhihu.com/purerender/20458251)，分析的不错，RAF（requestAnimationFrame）值得尝试一下。

后端技术，操作系统、虚拟化、存储、网络、桌面、安全
----
* [深入 Node 模块的安装和发布](http://segmentfault.com/a/1190000004221514)，一直也没深究过，了解一下。
* [Local Network与不同版本Windows Azure间多站点VPN配置详情](http://gaowenlong.blog.51cto.com/451336/1728897)。
* Neutron与Nova的网络逻辑关系，[Nova节点网络逻辑关系（一）](http://703356.blog.51cto.com/693356/1729391)。
* [Xen虚拟化的模式和演变](http://tasnrh.blog.51cto.com/4141731/1729310)，好久不用了，回顾一下。
* [KVM-VDI](https://github.com/Seitanas/kvm-vdi)，基于开源工程构建VDI方案的项目。核心的VDI逻辑是把一个**虚拟机**，作为**源虚拟机**，复制一份（包括磁盘文件）出来作为**初始虚拟机**，这就是模板了，每个**VDI虚拟机**的磁盘都是从初始虚拟机磁盘文件snapshot出来的。至于管理端，在网页上通过SPICE查看虚拟机的本地桌面。KVM-VDI的默认虚拟化平台是KVM了，但是在Nutanix技术博客里[提到](http://myvirtualcloud.net/?p=7521)，已经开始有人考虑跟Nutanix CE的整合了，直接用上融合架构的好处，也是不错。
* [OpenResty](https://openresty.org/)，由于锤子的捐赠，突然被更多人知道了，我也不例外。于是借这个机会了解一下，[OpenResty的现状、趋势、使用及学习方法](https://segmentfault.com/a/1190000004113020)，另外[章亦春的OpenResty和它的贡献者们](http://www.pingwest.com/openresty/)。
* [黑产godlike攻击: 邮箱 XSS 窃取 appleID 的案例分析](http://drops.wooyun.org/papers/11692)，典型案例。
* [域渗透——Pass The Hash & Pass The Key](http://drops.wooyun.org/tips/11631)。

硬件设备，ARM、终端、移动、智能设备、安全
----
<!--preview-end-->
* 使用 JS 构建跨平台的原生应用：[React Native iOS 通信机制初探](http://taobaofed.org/blog/2015/12/30/the-communication-scheme-of-react-native-in-ios/)。
* [React-native Android 热更新](http://richard-cao.github.io/2015/12/03/React-native-Android-%E7%83%AD%E6%9B%B4%E6%96%B0/)，这比纯原生app的热更新确实更简单。
* [内部Hybrid App经验解读](http://www.cnblogs.com/zhengyun_ustc/p/5088251.html)，实践经验。

团队建设、安全
----
* [有了 tldr，妈妈再也不用担心我记不住命令了](https://codingstyle.cn/topics/26)，Too long, Don't read，另见[项目仓库](https://github.com/tldr-pages/tldr)。看着确实比一般man或--help方便，支持语言环境也很多。
* [频繁变化的团队如何打造团队文化](http://insights.thoughtworkers.org/team-culture-building/)，这些实践值得尝试。



